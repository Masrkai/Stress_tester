<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1400" height="358" onload="init(evt)" viewBox="0 0 1400 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1400.0" height="358.0" fill="url(#background)"  />
<text id="title" x="700.00" y="24" >Function Call Frequency</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1290.00" y="24" >Search</text>
<text id="ignorecase" x="1374.00" y="24" >ic</text>
<text id="matched" x="1290.00" y="341" > </text>
<g id="frames">
<g >
<title>asm_exc_page_fault (162,604,061 samples, 0.01%)</title><rect x="1385.8" y="229" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1388.80" y="239.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (493,146,260 samples, 0.03%)</title><rect x="1375.0" y="213" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1377.97" y="223.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (246,001,655 samples, 0.01%)</title><rect x="10.0" y="181" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.05" y="191.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (627,622,444 samples, 0.03%)</title><rect x="1374.5" y="229" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1377.46" y="239.5" ></text>
</g>
<g >
<title>arch_scale_freq_tick (166,678,500 samples, 0.01%)</title><rect x="1376.2" y="117" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1379.22" y="127.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (142,833,893 samples, 0.01%)</title><rect x="1384.3" y="181" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1387.29" y="191.5" ></text>
</g>
<g >
<title>do_vmi_munmap (246,001,655 samples, 0.01%)</title><rect x="10.0" y="197" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.05" y="207.5" ></text>
</g>
<g >
<title>rm_isr (414,778,131 samples, 0.02%)</title><rect x="1373.5" y="133" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1376.51" y="143.5" ></text>
</g>
<g >
<title>tick_nohz_handler (4,280,663,336 samples, 0.22%)</title><rect x="1375.9" y="165" width="3.0" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1378.92" y="175.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (186,067,691 samples, 0.01%)</title><rect x="1383.6" y="197" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1386.61" y="207.5" ></text>
</g>
<g >
<title>exc_page_fault (3,795,618,600 samples, 0.19%)</title><rect x="1387.0" y="229" width="2.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1389.98" y="239.5" ></text>
</g>
<g >
<title>try_to_wake_up (618,223,558 samples, 0.03%)</title><rect x="1375.5" y="149" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1378.48" y="159.5" ></text>
</g>
<g >
<title>regmap_read (646,711,278 samples, 0.03%)</title><rect x="1372.4" y="117" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1375.41" y="127.5" ></text>
</g>
<g >
<title>blk_cgroup_congested (424,050,186 samples, 0.02%)</title><rect x="1387.8" y="117" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1390.84" y="127.5" ></text>
</g>
<g >
<title>__folio_batch_add_and_move (263,875,983 samples, 0.01%)</title><rect x="1387.4" y="149" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1390.39" y="159.5" ></text>
</g>
<g >
<title>msr_update_perf (170,927,436 samples, 0.01%)</title><rect x="1378.4" y="37" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1381.41" y="47.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1,953,986,889,795 samples, 99.98%)</title><rect x="10.2" y="277" width="1379.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="13.23" y="287.5" >execute_native_thread_routine</text>
</g>
<g >
<title>vms_clear_ptes (223,580,051 samples, 0.01%)</title><rect x="10.1" y="149" width="0.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="13.05" y="159.5" ></text>
</g>
<g >
<title>common_interrupt (2,583,692,757 samples, 0.13%)</title><rect x="1372.4" y="229" width="1.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1375.36" y="239.5" ></text>
</g>
<g >
<title>i2c_dw_isr (1,583,388,095 samples, 0.08%)</title><rect x="1372.4" y="149" width="1.1" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="1375.37" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (925,790,718 samples, 0.05%)</title><rect x="1388.5" y="85" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1391.49" y="95.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (419,226,223 samples, 0.02%)</title><rect x="1379.3" y="229" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1382.34" y="239.5" ></text>
</g>
<g >
<title>note_interrupt (171,878,991 samples, 0.01%)</title><rect x="1373.8" y="165" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1376.85" y="175.5" ></text>
</g>
<g >
<title>regmap_write (351,341,214 samples, 0.02%)</title><rect x="1372.9" y="117" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1375.87" y="127.5" ></text>
</g>
<g >
<title>MemoryStressTest::continuousBandwidthTest (8,754,093,660 samples, 0.45%)</title><rect x="1379.7" y="261" width="6.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1382.74" y="271.5" ></text>
</g>
<g >
<title>do_anonymous_page (2,676,013,825 samples, 0.14%)</title><rect x="1387.4" y="165" width="1.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1390.38" y="175.5" ></text>
</g>
<g >
<title>reweight_entity (415,194,908 samples, 0.02%)</title><rect x="1377.1" y="101" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1380.09" y="111.5" ></text>
</g>
<g >
<title>count_memcg_events.constprop.0 (232,264,830 samples, 0.01%)</title><rect x="1389.3" y="181" width="0.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1392.30" y="191.5" ></text>
</g>
<g >
<title>_nv035706rm (175,527,409 samples, 0.01%)</title><rect x="1373.7" y="85" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1376.65" y="95.5" ></text>
</g>
<g >
<title>__list_del_entry_valid_or_report (453,018,493 samples, 0.02%)</title><rect x="1388.8" y="53" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1391.80" y="63.5" ></text>
</g>
<g >
<title>SystemStressTes (1,954,336,577,414 samples, 100.00%)</title><rect x="10.0" y="293" width="1380.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >SystemStressTes</text>
</g>
<g >
<title>handle_softirqs (433,012,163 samples, 0.02%)</title><rect x="1375.0" y="197" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1377.98" y="207.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (332,199,610 samples, 0.02%)</title><rect x="1388.1" y="133" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1391.14" y="143.5" ></text>
</g>
<g >
<title>ttwu_do_activate (532,411,814 samples, 0.03%)</title><rect x="1375.5" y="133" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1378.52" y="143.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (312,482,044 samples, 0.02%)</title><rect x="1376.4" y="101" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1379.38" y="111.5" ></text>
</g>
<g >
<title>__alloc_frozen_pages_noprof (1,037,412,611 samples, 0.05%)</title><rect x="1388.4" y="101" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1391.42" y="111.5" ></text>
</g>
<g >
<title>_nv046989rm (414,778,131 samples, 0.02%)</title><rect x="1373.5" y="117" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1376.51" y="127.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (263,875,983 samples, 0.01%)</title><rect x="1387.4" y="133" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1390.39" y="143.5" ></text>
</g>
<g >
<title>_regmap_read (193,165,239 samples, 0.01%)</title><rect x="1373.1" y="101" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1376.12" y="111.5" ></text>
</g>
<g >
<title>handle_fasteoi_irq (210,668,454 samples, 0.01%)</title><rect x="1374.0" y="197" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1376.98" y="207.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (259,941,893 samples, 0.01%)</title><rect x="1388.2" y="117" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1391.19" y="127.5" ></text>
</g>
<g >
<title>handle_irq_event (206,529,567 samples, 0.01%)</title><rect x="1374.0" y="181" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1376.98" y="191.5" ></text>
</g>
<g >
<title>amd_pstate_adjust_perf (479,158,082 samples, 0.02%)</title><rect x="1378.3" y="69" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1381.28" y="79.5" ></text>
</g>
<g >
<title>__pgalloc_tag_add (348,646,561 samples, 0.02%)</title><rect x="1388.5" y="69" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1391.51" y="79.5" ></text>
</g>
<g >
<title>MemoryStressTest::measureMemoryBandwidth (8,545,498,843 samples, 0.44%)</title><rect x="1379.7" y="245" width="6.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1382.74" y="255.5" ></text>
</g>
<g >
<title>vma_alloc_folio_noprof (1,226,706,102 samples, 0.06%)</title><rect x="1388.4" y="133" width="0.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1391.38" y="143.5" ></text>
</g>
<g >
<title>update_load_avg (1,385,620,605 samples, 0.07%)</title><rect x="1377.8" y="101" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1380.75" y="111.5" ></text>
</g>
<g >
<title>rcu_core (231,308,277 samples, 0.01%)</title><rect x="1375.0" y="181" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1378.03" y="191.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (6,151,971,072 samples, 0.31%)</title><rect x="1375.0" y="229" width="4.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1377.97" y="239.5" ></text>
</g>
<g >
<title>__irqentry_text_end (729,982,215 samples, 0.04%)</title><rect x="1371.8" y="245" width="0.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1374.81" y="255.5" ></text>
</g>
<g >
<title>unsigned long std::uniform_int_distribution&lt;unsigned long&gt;::operator (915,115,061 samples, 0.05%)</title><rect x="1383.7" y="197" width="0.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1386.74" y="207.5" ></text>
</g>
<g >
<title>mas_walk (193,685,749 samples, 0.01%)</title><rect x="1389.5" y="181" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1392.51" y="191.5" ></text>
</g>
<g >
<title>MemoryStressTest::performSequentialWrite (1,062,876,073 samples, 0.05%)</title><rect x="1384.9" y="229" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1387.87" y="239.5" ></text>
</g>
<g >
<title>__irqentry_text_end (525,600,919 samples, 0.03%)</title><rect x="1386.5" y="245" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1389.53" y="255.5" ></text>
</g>
<g >
<title>folio_prealloc (2,004,460,951 samples, 0.10%)</title><rect x="1387.8" y="149" width="1.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1390.83" y="159.5" ></text>
</g>
<g >
<title>__vm_munmap (246,001,655 samples, 0.01%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="13.05" y="223.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (524,687,457 samples, 0.03%)</title><rect x="1388.8" y="69" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1391.75" y="79.5" ></text>
</g>
<g >
<title>dw_reg_read (633,766,613 samples, 0.03%)</title><rect x="1372.4" y="85" width="0.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1375.42" y="95.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (227,023,676 samples, 0.01%)</title><rect x="1385.6" y="229" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1388.62" y="239.5" ></text>
</g>
<g >
<title>sugov_update_single_perf (710,076,935 samples, 0.04%)</title><rect x="1378.2" y="85" width="0.5" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1381.23" y="95.5" ></text>
</g>
<g >
<title>dw_reg_read (314,410,649 samples, 0.02%)</title><rect x="1373.3" y="101" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1376.26" y="111.5" ></text>
</g>
<g >
<title>__count_memcg_events (171,940,112 samples, 0.01%)</title><rect x="1389.3" y="165" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1392.34" y="175.5" ></text>
</g>
<g >
<title>MemoryStressTest::performRandomAccess (6,443,807,335 samples, 0.33%)</title><rect x="1379.8" y="229" width="4.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1382.84" y="239.5" ></text>
</g>
<g >
<title>_nv035608rm (144,344,434 samples, 0.01%)</title><rect x="1373.6" y="85" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1376.55" y="95.5" ></text>
</g>
<g >
<title>handle_irq_event (2,274,295,605 samples, 0.12%)</title><rect x="1372.4" y="181" width="1.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1375.36" y="191.5" ></text>
</g>
<g >
<title>amd_pstate_update (299,230,046 samples, 0.02%)</title><rect x="1378.3" y="53" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1381.32" y="63.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (266,713,306 samples, 0.01%)</title><rect x="1384.1" y="181" width="0.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1387.10" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (246,001,655 samples, 0.01%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.05" y="255.5" ></text>
</g>
<g >
<title>__munmap (246,001,655 samples, 0.01%)</title><rect x="10.0" y="277" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.05" y="287.5" ></text>
</g>
<g >
<title>CPUStressTest::cpuHashStressTest (1,939,484,807,555 samples, 99.24%)</title><rect x="10.2" y="261" width="1369.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.23" y="271.5" >CPUStressTest::cpuHashStressTest</text>
</g>
<g >
<title>folio_add_new_anon_rmap (333,663,677 samples, 0.02%)</title><rect x="1387.6" y="149" width="0.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1390.59" y="159.5" ></text>
</g>
<g >
<title>__folio_mod_stat (286,468,832 samples, 0.01%)</title><rect x="1387.6" y="133" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1390.63" y="143.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (5,470,557,510 samples, 0.28%)</title><rect x="1375.3" y="197" width="3.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1378.34" y="207.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (1,050,513,303 samples, 0.05%)</title><rect x="1388.4" y="117" width="0.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1391.41" y="127.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (5,085,799,735 samples, 0.26%)</title><rect x="1375.4" y="181" width="3.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1378.44" y="191.5" ></text>
</g>
<g >
<title>enqueue_task (498,556,666 samples, 0.03%)</title><rect x="1375.5" y="117" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1378.53" y="127.5" ></text>
</g>
<g >
<title>nvidia_isr (467,181,408 samples, 0.02%)</title><rect x="1373.5" y="149" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1376.49" y="159.5" ></text>
</g>
<g >
<title>regmap_read (193,165,239 samples, 0.01%)</title><rect x="1373.1" y="117" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1376.12" y="127.5" ></text>
</g>
<g >
<title>__schedule (346,832,212 samples, 0.02%)</title><rect x="1379.4" y="197" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1382.38" y="207.5" ></text>
</g>
<g >
<title>MemoryStressTest::performSequentialRead (680,067,306 samples, 0.03%)</title><rect x="1384.4" y="229" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1387.39" y="239.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (2,093,297,440 samples, 0.11%)</title><rect x="1372.4" y="165" width="1.4" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1375.36" y="175.5" ></text>
</g>
<g >
<title>_nv046969rm (410,449,923 samples, 0.02%)</title><rect x="1373.5" y="101" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1376.51" y="111.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_events (167,418,366 samples, 0.01%)</title><rect x="1376.5" y="85" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1379.48" y="95.5" ></text>
</g>
<g >
<title>folios_put_refs (158,578,815 samples, 0.01%)</title><rect x="10.1" y="85" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="13.05" y="95.5" ></text>
</g>
<g >
<title>sync_regs (157,339,317 samples, 0.01%)</title><rect x="1389.7" y="229" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1392.71" y="239.5" ></text>
</g>
<g >
<title>i2c_dw_process_transfer (1,049,827,986 samples, 0.05%)</title><rect x="1372.4" y="133" width="0.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1375.37" y="143.5" ></text>
</g>
<g >
<title>_regmap_read (633,766,613 samples, 0.03%)</title><rect x="1372.4" y="101" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1375.42" y="111.5" ></text>
</g>
<g >
<title>update_process_times (4,127,558,317 samples, 0.21%)</title><rect x="1376.0" y="149" width="2.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1379.00" y="159.5" ></text>
</g>
<g >
<title>__folio_throttle_swaprate (424,050,186 samples, 0.02%)</title><rect x="1387.8" y="133" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1390.84" y="143.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2,699,819,579 samples, 0.14%)</title><rect x="1372.4" y="245" width="1.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1375.35" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (7,156,164,082 samples, 0.37%)</title><rect x="1374.3" y="245" width="5.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1377.26" y="255.5" ></text>
</g>
<g >
<title>lru_add (215,576,225 samples, 0.01%)</title><rect x="1387.4" y="117" width="0.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1390.42" y="127.5" ></text>
</g>
<g >
<title>_regmap_read (322,980,961 samples, 0.02%)</title><rect x="1373.3" y="117" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1376.26" y="127.5" ></text>
</g>
<g >
<title>__common_interrupt (2,501,903,232 samples, 0.13%)</title><rect x="1372.4" y="213" width="1.7" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1375.36" y="223.5" ></text>
</g>
<g >
<title>psi_account_irqtime (465,378,363 samples, 0.02%)</title><rect x="1376.6" y="117" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1379.60" y="127.5" ></text>
</g>
<g >
<title>void std::shuffle&lt;__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (3,737,834,111 samples, 0.19%)</title><rect x="1381.7" y="213" width="2.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1384.75" y="223.5" ></text>
</g>
<g >
<title>vms_complete_munmap_vmas (232,557,714 samples, 0.01%)</title><rect x="10.0" y="165" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.05" y="175.5" ></text>
</g>
<g >
<title>hrtimer_wakeup (622,543,418 samples, 0.03%)</title><rect x="1375.5" y="165" width="0.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1378.48" y="175.5" ></text>
</g>
<g >
<title>task_tick_fair (2,522,541,806 samples, 0.13%)</title><rect x="1377.0" y="117" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1379.96" y="127.5" ></text>
</g>
<g >
<title>handle_edge_irq (2,287,259,202 samples, 0.12%)</title><rect x="1372.4" y="197" width="1.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1375.36" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (246,001,655 samples, 0.01%)</title><rect x="10.0" y="261" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.05" y="271.5" ></text>
</g>
<g >
<title>__lruvec_stat_mod_folio (277,858,417 samples, 0.01%)</title><rect x="1387.6" y="117" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1390.63" y="127.5" ></text>
</g>
<g >
<title>schedule (473,818,224 samples, 0.02%)</title><rect x="1374.5" y="213" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1377.54" y="223.5" ></text>
</g>
<g >
<title>lock_vma_under_rcu (258,388,724 samples, 0.01%)</title><rect x="1389.5" y="197" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1392.47" y="207.5" ></text>
</g>
<g >
<title>enqueue_task_fair (357,154,158 samples, 0.02%)</title><rect x="1375.5" y="101" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1378.54" y="111.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (4,133,027,244 samples, 0.21%)</title><rect x="1386.9" y="245" width="2.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1389.90" y="255.5" ></text>
</g>
<g >
<title>regmap_read (340,394,870 samples, 0.02%)</title><rect x="1373.3" y="133" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1376.25" y="143.5" ></text>
</g>
<g >
<title>__update_load_avg_se (150,408,810 samples, 0.01%)</title><rect x="1378.1" y="85" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1381.06" y="95.5" ></text>
</g>
<g >
<title>error_entry (186,022,121 samples, 0.01%)</title><rect x="1389.8" y="245" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1392.82" y="255.5" ></text>
</g>
<g >
<title>rcu_do_batch (155,952,959 samples, 0.01%)</title><rect x="1375.1" y="165" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1378.07" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (3,266,174,386 samples, 0.17%)</title><rect x="1387.2" y="197" width="2.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1390.16" y="207.5" ></text>
</g>
<g >
<title>update_curr (370,877,542 samples, 0.02%)</title><rect x="1377.5" y="101" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1380.49" y="111.5" ></text>
</g>
<g >
<title>MemoryStressTest::memoryStressTest (5,718,258,663 samples, 0.29%)</title><rect x="1385.9" y="261" width="4.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1388.93" y="271.5" ></text>
</g>
<g >
<title>__pick_next_task (193,009,408 samples, 0.01%)</title><rect x="1374.6" y="181" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1377.59" y="191.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (158,578,815 samples, 0.01%)</title><rect x="10.1" y="133" width="0.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="13.05" y="143.5" ></text>
</g>
<g >
<title>all (1,954,336,581,296 samples, 100%)</title><rect x="10.0" y="309" width="1380.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>schedule (363,603,477 samples, 0.02%)</title><rect x="1379.4" y="213" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1382.36" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (246,001,655 samples, 0.01%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="13.05" y="239.5" ></text>
</g>
<g >
<title>pick_next_task_fair (193,009,408 samples, 0.01%)</title><rect x="1374.6" y="165" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1377.59" y="175.5" ></text>
</g>
<g >
<title>__schedule (469,577,005 samples, 0.02%)</title><rect x="1374.5" y="197" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1377.54" y="207.5" ></text>
</g>
<g >
<title>__tlb_batch_free_encoded_pages (158,578,815 samples, 0.01%)</title><rect x="10.1" y="117" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="13.05" y="127.5" ></text>
</g>
<g >
<title>dw_reg_read (193,165,239 samples, 0.01%)</title><rect x="1373.1" y="85" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1376.12" y="95.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (208,594,817 samples, 0.01%)</title><rect x="1385.8" y="245" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1388.78" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,928,727,640 samples, 0.15%)</title><rect x="1387.2" y="181" width="2.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1390.23" y="191.5" ></text>
</g>
<g >
<title>lru_gen_add_folio (146,845,730 samples, 0.01%)</title><rect x="1387.5" y="101" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1390.46" y="111.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (5,543,153,434 samples, 0.28%)</title><rect x="1375.3" y="213" width="3.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1378.32" y="223.5" ></text>
</g>
<g >
<title>i2c_dw_read_clear_intrbits (193,165,239 samples, 0.01%)</title><rect x="1373.1" y="133" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1376.12" y="143.5" ></text>
</g>
<g >
<title>_nv013070rm (153,759,172 samples, 0.01%)</title><rect x="1373.7" y="69" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1376.65" y="79.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (158,578,815 samples, 0.01%)</title><rect x="10.1" y="101" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="13.05" y="111.5" ></text>
</g>
<g >
<title>sched_tick (3,743,001,240 samples, 0.19%)</title><rect x="1376.2" y="133" width="2.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1379.19" y="143.5" ></text>
</g>
<g >
<title>perf_event_task_tick (354,516,086 samples, 0.02%)</title><rect x="1376.4" y="117" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1379.35" y="127.5" ></text>
</g>
<g >
<title>do_user_addr_fault (3,555,180,929 samples, 0.18%)</title><rect x="1387.1" y="213" width="2.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1390.15" y="223.5" ></text>
</g>
<g >
<title>unsigned long std::uniform_int_distribution&lt;unsigned long&gt;::operator (162,970,605 samples, 0.01%)</title><rect x="1381.6" y="213" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1384.63" y="223.5" ></text>
</g>
<g >
<title>__pick_next_task (163,973,859 samples, 0.01%)</title><rect x="1379.5" y="181" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1382.45" y="191.5" ></text>
</g>
<g >
<title>_nv035707rm (149,748,203 samples, 0.01%)</title><rect x="1373.7" y="53" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1376.65" y="63.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (211,567,610 samples, 0.01%)</title><rect x="1377.9" y="85" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1380.91" y="95.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (461,654,284 samples, 0.02%)</title><rect x="1379.3" y="245" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1382.32" y="255.5" ></text>
</g>
</g>
</svg>
