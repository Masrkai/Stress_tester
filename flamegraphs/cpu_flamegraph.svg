<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>vms_clear_ptes (216,295,551 samples, 0.01%)</title><rect x="10.0" y="149" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="13.05" y="159.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (275,545,148 samples, 0.01%)</title><rect x="1184.7" y="85" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1187.70" y="95.5" ></text>
</g>
<g >
<title>SystemStressTest::continuousBandwidthTest (8,427,344,375 samples, 0.43%)</title><rect x="10.2" y="261" width="5.0" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="13.18" y="271.5" ></text>
</g>
<g >
<title>update_curr (657,340,449 samples, 0.03%)</title><rect x="1184.1" y="101" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1187.09" y="111.5" ></text>
</g>
<g >
<title>lock_vma_under_rcu (311,746,518 samples, 0.02%)</title><rect x="1189.5" y="197" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1192.51" y="207.5" ></text>
</g>
<g >
<title>unsigned long std::uniform_int_distribution&lt;unsigned long&gt;::operator (938,147,472 samples, 0.05%)</title><rect x="13.5" y="197" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="16.46" y="207.5" ></text>
</g>
<g >
<title>folio_prealloc (1,892,263,013 samples, 0.10%)</title><rect x="1188.1" y="149" width="1.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1191.09" y="159.5" ></text>
</g>
<g >
<title>_nv046989rm (312,419,209 samples, 0.02%)</title><rect x="1180.2" y="117" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1183.23" y="127.5" ></text>
</g>
<g >
<title>__napi_poll (242,643,199 samples, 0.01%)</title><rect x="1181.4" y="165" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1184.41" y="175.5" ></text>
</g>
<g >
<title>do_user_addr_fault (3,462,567,427 samples, 0.18%)</title><rect x="1187.6" y="213" width="2.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1190.64" y="223.5" ></text>
</g>
<g >
<title>handle_irq_event (485,038,407 samples, 0.02%)</title><rect x="1180.2" y="181" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1183.19" y="191.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (217,803,559 samples, 0.01%)</title><rect x="1188.4" y="117" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1191.35" y="127.5" ></text>
</g>
<g >
<title>handle_softirqs (312,220,536 samples, 0.02%)</title><rect x="1180.5" y="197" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1183.48" y="207.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (8,312,859,978 samples, 0.42%)</title><rect x="1181.3" y="229" width="5.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1184.31" y="239.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (407,342,435 samples, 0.02%)</title><rect x="1180.2" y="165" width="0.3" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1183.22" y="175.5" ></text>
</g>
<g >
<title>__vm_munmap (226,478,473 samples, 0.01%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="13.05" y="223.5" ></text>
</g>
<g >
<title>try_to_wake_up (420,717,070 samples, 0.02%)</title><rect x="1182.0" y="149" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1184.97" y="159.5" ></text>
</g>
<g >
<title>SystemStressTest::performSequentialRead (568,514,850 samples, 0.03%)</title><rect x="14.0" y="229" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="17.03" y="239.5" ></text>
</g>
<g >
<title>asm_common_interrupt (985,189,557 samples, 0.05%)</title><rect x="1180.2" y="245" width="0.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1183.18" y="255.5" ></text>
</g>
<g >
<title>rcu_core (205,913,973 samples, 0.01%)</title><rect x="1181.6" y="181" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1184.55" y="191.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (250,011,898 samples, 0.01%)</title><rect x="13.7" y="181" width="0.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="16.71" y="191.5" ></text>
</g>
<g >
<title>sched_tick (5,338,881,391 samples, 0.27%)</title><rect x="1182.6" y="133" width="3.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1185.60" y="143.5" ></text>
</g>
<g >
<title>arch_scale_freq_tick (181,745,467 samples, 0.01%)</title><rect x="1182.7" y="117" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1185.68" y="127.5" ></text>
</g>
<g >
<title>SystemStressTest::cpuHashStressTest (1,960,508,303,343 samples, 99.27%)</title><rect x="15.2" y="261" width="1171.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="18.22" y="271.5" >SystemStressTest::cpuHashStressTest</text>
</g>
<g >
<title>netif_receive_skb_list_internal (242,643,199 samples, 0.01%)</title><rect x="1181.4" y="117" width="0.2" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1184.41" y="127.5" ></text>
</g>
<g >
<title>__pgalloc_tag_add (354,819,915 samples, 0.02%)</title><rect x="1188.6" y="69" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1191.63" y="79.5" ></text>
</g>
<g >
<title>__count_memcg_events (207,675,802 samples, 0.01%)</title><rect x="1189.4" y="165" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1192.37" y="175.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (1,974,601,561,401 samples, 99.98%)</title><rect x="10.2" y="277" width="1179.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="13.18" y="287.5" >execute_native_thread_routine</text>
</g>
<g >
<title>void std::shuffle&lt;__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (3,555,401,593 samples, 0.18%)</title><rect x="11.9" y="213" width="2.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="14.90" y="223.5" ></text>
</g>
<g >
<title>vms_complete_munmap_vmas (216,295,551 samples, 0.01%)</title><rect x="10.0" y="165" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.05" y="175.5" ></text>
</g>
<g >
<title>vma_alloc_folio_noprof (1,237,041,310 samples, 0.06%)</title><rect x="1188.5" y="133" width="0.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1191.48" y="143.5" ></text>
</g>
<g >
<title>rtl8169_poll (242,643,199 samples, 0.01%)</title><rect x="1181.4" y="149" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1184.41" y="159.5" ></text>
</g>
<g >
<title>lru_add (176,068,686 samples, 0.01%)</title><rect x="1187.9" y="117" width="0.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1190.86" y="127.5" ></text>
</g>
<g >
<title>mas_walk (198,607,290 samples, 0.01%)</title><rect x="1189.6" y="181" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.58" y="191.5" ></text>
</g>
<g >
<title>ip_list_rcv (173,492,341 samples, 0.01%)</title><rect x="1180.6" y="85" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1183.55" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (226,478,473 samples, 0.01%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.05" y="255.5" ></text>
</g>
<g >
<title>enqueue_task_fair (239,449,883 samples, 0.01%)</title><rect x="1182.0" y="101" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1185.01" y="111.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,691,385,099 samples, 0.14%)</title><rect x="1187.7" y="181" width="1.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1190.72" y="191.5" ></text>
</g>
<g >
<title>__common_interrupt (493,443,990 samples, 0.02%)</title><rect x="1180.2" y="213" width="0.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1183.18" y="223.5" ></text>
</g>
<g >
<title>__irqentry_text_end (646,653,548 samples, 0.03%)</title><rect x="1187.1" y="245" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1190.07" y="255.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (226,478,473 samples, 0.01%)</title><rect x="10.0" y="181" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.05" y="191.5" ></text>
</g>
<g >
<title>folio_add_new_anon_rmap (207,863,551 samples, 0.01%)</title><rect x="1188.0" y="149" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1190.97" y="159.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (312,220,536 samples, 0.02%)</title><rect x="1180.5" y="213" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1183.48" y="223.5" ></text>
</g>
<g >
<title>__folio_throttle_swaprate (411,143,774 samples, 0.02%)</title><rect x="1188.1" y="133" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1191.10" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (226,478,473 samples, 0.01%)</title><rect x="10.0" y="261" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.05" y="271.5" ></text>
</g>
<g >
<title>update_load_avg (1,975,174,176 samples, 0.10%)</title><rect x="1184.5" y="101" width="1.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1187.49" y="111.5" ></text>
</g>
<g >
<title>net_rx_action (303,601,232 samples, 0.02%)</title><rect x="1180.5" y="181" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1183.48" y="191.5" ></text>
</g>
<g >
<title>handle_softirqs (783,580,484 samples, 0.04%)</title><rect x="1181.4" y="197" width="0.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1184.35" y="207.5" ></text>
</g>
<g >
<title>exc_page_fault (3,672,093,909 samples, 0.19%)</title><rect x="1187.5" y="229" width="2.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1190.52" y="239.5" ></text>
</g>
<g >
<title>ttwu_do_activate (351,311,122 samples, 0.02%)</title><rect x="1182.0" y="133" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1185.00" y="143.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (321,158,491 samples, 0.02%)</title><rect x="1186.3" y="229" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1189.29" y="239.5" ></text>
</g>
<g >
<title>handle_edge_irq (485,038,407 samples, 0.02%)</title><rect x="1180.2" y="197" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1183.19" y="207.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (474,692,276 samples, 0.02%)</title><rect x="1188.8" y="69" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1191.84" y="79.5" ></text>
</g>
<g >
<title>__irqentry_text_end (499,179,498 samples, 0.03%)</title><rect x="1179.9" y="245" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1182.87" y="255.5" ></text>
</g>
<g >
<title>napi_complete_done (242,643,199 samples, 0.01%)</title><rect x="1181.4" y="133" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1184.41" y="143.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (7,260,632,403 samples, 0.37%)</title><rect x="1181.9" y="197" width="4.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1184.87" y="207.5" ></text>
</g>
<g >
<title>__list_del_entry_valid_or_report (395,470,192 samples, 0.02%)</title><rect x="1188.9" y="53" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1191.88" y="63.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (356,948,061 samples, 0.02%)</title><rect x="1181.0" y="229" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1183.97" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (226,478,473 samples, 0.01%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="13.05" y="239.5" ></text>
</g>
<g >
<title>do_anonymous_page (2,411,792,211 samples, 0.12%)</title><rect x="1187.8" y="165" width="1.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1190.82" y="175.5" ></text>
</g>
<g >
<title>perf_event_task_tick (441,494,497 samples, 0.02%)</title><rect x="1182.8" y="117" width="0.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1185.80" y="127.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (6,734,224,525 samples, 0.34%)</title><rect x="1181.9" y="181" width="4.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1184.93" y="191.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (878,514,245 samples, 0.04%)</title><rect x="1181.3" y="213" width="0.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1184.33" y="223.5" ></text>
</g>
<g >
<title>hrtimer_wakeup (420,717,070 samples, 0.02%)</title><rect x="1182.0" y="165" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1184.97" y="175.5" ></text>
</g>
<g >
<title>__munmap (226,478,617 samples, 0.01%)</title><rect x="10.0" y="277" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="13.05" y="287.5" ></text>
</g>
<g >
<title>do_vmi_munmap (226,478,473 samples, 0.01%)</title><rect x="10.0" y="197" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.05" y="207.5" ></text>
</g>
<g >
<title>psi_account_irqtime (727,818,846 samples, 0.04%)</title><rect x="1183.1" y="117" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1186.06" y="127.5" ></text>
</g>
<g >
<title>sugov_update_single_perf (837,147,097 samples, 0.04%)</title><rect x="1185.2" y="85" width="0.5" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1188.17" y="95.5" ></text>
</g>
<g >
<title>schedule (286,705,119 samples, 0.01%)</title><rect x="1186.3" y="213" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1189.31" y="223.5" ></text>
</g>
<g >
<title>SystemStressTest::memoryStressTest (5,648,556,149 samples, 0.29%)</title><rect x="1186.6" y="261" width="3.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1189.60" y="271.5" ></text>
</g>
<g >
<title>blk_cgroup_congested (411,143,774 samples, 0.02%)</title><rect x="1188.1" y="117" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1191.10" y="127.5" ></text>
</g>
<g >
<title>rm_isr (312,419,209 samples, 0.02%)</title><rect x="1180.2" y="133" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1183.23" y="143.5" ></text>
</g>
<g >
<title>nvidia_isr (374,020,321 samples, 0.02%)</title><rect x="1180.2" y="149" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1183.22" y="159.5" ></text>
</g>
<g >
<title>handle_mm_fault (3,098,739,485 samples, 0.16%)</title><rect x="1187.7" y="197" width="1.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1190.66" y="207.5" ></text>
</g>
<g >
<title>cpufreq_cpu_get (216,377,669 samples, 0.01%)</title><rect x="1185.3" y="37" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1188.29" y="47.5" ></text>
</g>
<g >
<title>napi_complete_done (259,787,249 samples, 0.01%)</title><rect x="1180.5" y="133" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1183.50" y="143.5" ></text>
</g>
<g >
<title>__netif_receive_skb_list_core (242,726,027 samples, 0.01%)</title><rect x="1180.5" y="101" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1183.51" y="111.5" ></text>
</g>
<g >
<title>common_interrupt (813,760,756 samples, 0.04%)</title><rect x="1180.2" y="229" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1183.18" y="239.5" ></text>
</g>
<g >
<title>__folio_batch_add_and_move (241,799,774 samples, 0.01%)</title><rect x="1187.8" y="149" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1190.82" y="159.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (3,931,776,476 samples, 0.20%)</title><rect x="1187.5" y="245" width="2.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1190.46" y="255.5" ></text>
</g>
<g >
<title>__schedule (245,476,860 samples, 0.01%)</title><rect x="1181.0" y="197" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1184.01" y="207.5" ></text>
</g>
<g >
<title>account_user_time (198,721,370 samples, 0.01%)</title><rect x="1182.3" y="133" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1185.34" y="143.5" ></text>
</g>
<g >
<title>tick_nohz_handler (6,148,484,013 samples, 0.31%)</title><rect x="1182.2" y="165" width="3.7" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1185.23" y="175.5" ></text>
</g>
<g >
<title>amd_pstate_update (379,785,203 samples, 0.02%)</title><rect x="1185.3" y="53" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1188.26" y="63.5" ></text>
</g>
<g >
<title>ip_list_rcv (172,929,397 samples, 0.01%)</title><rect x="1181.5" y="85" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1184.45" y="95.5" ></text>
</g>
<g >
<title>__alloc_frozen_pages_noprof (1,062,049,688 samples, 0.05%)</title><rect x="1188.5" y="101" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1191.52" y="111.5" ></text>
</g>
<g >
<title>sched_clock_cpu (171,635,523 samples, 0.01%)</title><rect x="1185.1" y="85" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1188.05" y="95.5" ></text>
</g>
<g >
<title>update_process_times (5,949,841,294 samples, 0.30%)</title><rect x="1182.3" y="149" width="3.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1185.33" y="159.5" ></text>
</g>
<g >
<title>reweight_entity (456,837,484 samples, 0.02%)</title><rect x="1183.7" y="101" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1186.71" y="111.5" ></text>
</g>
<g >
<title>rtl8169_poll (303,601,232 samples, 0.02%)</title><rect x="1180.5" y="149" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1183.48" y="159.5" ></text>
</g>
<g >
<title>all (1,974,933,773,082 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_events (174,906,680 samples, 0.01%)</title><rect x="1183.0" y="85" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1185.95" y="95.5" ></text>
</g>
<g >
<title>update_cfs_group (181,763,328 samples, 0.01%)</title><rect x="1184.0" y="101" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1186.98" y="111.5" ></text>
</g>
<g >
<title>SystemStressTest::performSequentialWrite (1,086,264,389 samples, 0.06%)</title><rect x="14.4" y="229" width="0.6" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="17.36" y="239.5" ></text>
</g>
<g >
<title>SystemStressTes (1,974,933,772,650 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >SystemStressTes</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (9,219,745,638 samples, 0.47%)</title><rect x="1180.8" y="245" width="5.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1183.77" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (372,446,542 samples, 0.02%)</title><rect x="1186.3" y="245" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1189.28" y="255.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (235,398,518 samples, 0.01%)</title><rect x="1188.3" y="133" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1191.34" y="143.5" ></text>
</g>
<g >
<title>error_entry (259,494,323 samples, 0.01%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1192.81" y="255.5" ></text>
</g>
<g >
<title>enqueue_task (334,529,330 samples, 0.02%)</title><rect x="1182.0" y="117" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1185.00" y="127.5" ></text>
</g>
<g >
<title>sync_regs (213,800,430 samples, 0.01%)</title><rect x="1181.2" y="229" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1184.18" y="239.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (424,270,339 samples, 0.02%)</title><rect x="1182.8" y="101" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1185.81" y="111.5" ></text>
</g>
<g >
<title>__napi_poll (303,601,232 samples, 0.02%)</title><rect x="1180.5" y="165" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1183.48" y="175.5" ></text>
</g>
<g >
<title>ip_sublist_rcv (172,929,397 samples, 0.01%)</title><rect x="1181.5" y="69" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1184.45" y="79.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (215,572,330 samples, 0.01%)</title><rect x="1186.1" y="181" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1189.06" y="191.5" ></text>
</g>
<g >
<title>ip_sublist_rcv (173,492,341 samples, 0.01%)</title><rect x="1180.6" y="69" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1183.55" y="79.5" ></text>
</g>
<g >
<title>__update_load_avg_se (309,480,363 samples, 0.02%)</title><rect x="1184.9" y="85" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1187.87" y="95.5" ></text>
</g>
<g >
<title>SystemStressTest::performRandomAccess (6,324,031,994 samples, 0.32%)</title><rect x="10.2" y="229" width="3.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="13.25" y="239.5" ></text>
</g>
<g >
<title>schedule (245,477,292 samples, 0.01%)</title><rect x="1181.0" y="213" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1184.01" y="223.5" ></text>
</g>
<g >
<title>get_page_from_freelist (898,970,036 samples, 0.05%)</title><rect x="1188.6" y="85" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1191.61" y="95.5" ></text>
</g>
<g >
<title>_nv046969rm (303,530,193 samples, 0.02%)</title><rect x="1180.2" y="101" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1183.23" y="111.5" ></text>
</g>
<g >
<title>netif_receive_skb_list_internal (242,726,027 samples, 0.01%)</title><rect x="1180.5" y="117" width="0.2" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1183.51" y="127.5" ></text>
</g>
<g >
<title>__schedule (286,704,975 samples, 0.01%)</title><rect x="1186.3" y="197" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1189.31" y="207.5" ></text>
</g>
<g >
<title>SystemStressTest::measureMemoryBandwidth (8,250,296,312 samples, 0.42%)</title><rect x="10.2" y="245" width="4.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.18" y="255.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (241,799,774 samples, 0.01%)</title><rect x="1187.8" y="133" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1190.82" y="143.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (1,084,991,419 samples, 0.05%)</title><rect x="1188.5" y="117" width="0.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.50" y="127.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (284,620,800 samples, 0.01%)</title><rect x="13.9" y="181" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="16.86" y="191.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (177,048,063 samples, 0.01%)</title><rect x="15.1" y="245" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.11" y="255.5" ></text>
</g>
<g >
<title>__netif_receive_skb_list_core (242,643,199 samples, 0.01%)</title><rect x="1181.4" y="101" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1184.41" y="111.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (7,313,529,571 samples, 0.37%)</title><rect x="1181.9" y="213" width="4.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1184.86" y="223.5" ></text>
</g>
<g >
<title>task_tick_fair (3,592,214,849 samples, 0.18%)</title><rect x="1183.5" y="117" width="2.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1186.54" y="127.5" ></text>
</g>
<g >
<title>amd_pstate_adjust_perf (551,248,880 samples, 0.03%)</title><rect x="1185.2" y="69" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1188.24" y="79.5" ></text>
</g>
<g >
<title>count_memcg_events.constprop.0 (277,372,817 samples, 0.01%)</title><rect x="1189.3" y="181" width="0.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1192.33" y="191.5" ></text>
</g>
<g >
<title>net_rx_action (251,243,863 samples, 0.01%)</title><rect x="1181.4" y="181" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1184.40" y="191.5" ></text>
</g>
</g>
</svg>
