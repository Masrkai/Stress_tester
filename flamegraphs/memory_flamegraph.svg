<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eef2ee" offset="5%" />
		<stop stop-color="#e0ffe0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Memory Events</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>sysmalloc (95,909 samples, 0.05%)</title><rect x="1189.4" y="261" width="0.6" height="15.0" fill="rgb(0,198,35)" rx="2" ry="2" />
<text  x="1192.37" y="271.5" ></text>
</g>
<g >
<title>[unknown] (149,586 samples, 0.08%)</title><rect x="11.2" y="229" width="1.0" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="14.18" y="239.5" ></text>
</g>
<g >
<title>void std::shuffle&lt;__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (51,082,617 samples, 28.47%)</title><rect x="711.4" y="197" width="336.0" height="15.0" fill="rgb(0,227,155)" rx="2" ry="2" />
<text  x="714.43" y="207.5" >void std::shuffle&lt;__gnu_cxx::__normal_iterato..</text>
</g>
<g >
<title>SystemStressTest::memoryStressTest (13,395,291 samples, 7.47%)</title><rect x="1097.1" y="245" width="88.1" height="15.0" fill="rgb(0,191,7)" rx="2" ry="2" />
<text  x="1100.09" y="255.5" >SystemStre..</text>
</g>
<g >
<title>__printf_fp_l_buffer (213,662 samples, 0.12%)</title><rect x="15.2" y="261" width="1.4" height="15.0" fill="rgb(0,197,31)" rx="2" ry="2" />
<text  x="18.16" y="271.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long&gt; (51,612 samples, 0.03%)</title><rect x="11.4" y="213" width="0.4" height="15.0" fill="rgb(0,190,2)" rx="2" ry="2" />
<text  x="14.42" y="223.5" ></text>
</g>
<g >
<title>[unknown] (15,355 samples, 0.01%)</title><rect x="15.0" y="245" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="18.03" y="255.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (2,614,804 samples, 1.46%)</title><rect x="1024.9" y="165" width="17.2" height="15.0" fill="rgb(0,192,11)" rx="2" ry="2" />
<text  x="1027.87" y="175.5" ></text>
</g>
<g >
<title>all (179,419,973 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(0,198,35)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>SystemStressTest::run (177,136 samples, 0.10%)</title><rect x="12.9" y="229" width="1.2" height="15.0" fill="rgb(0,232,177)" rx="2" ry="2" />
<text  x="15.93" y="239.5" ></text>
</g>
<g >
<title>SystemStressTes (179,419,973 samples, 100.00%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(0,233,183)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >SystemStressTes</text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;long&gt; (65,668 samples, 0.04%)</title><rect x="13.6" y="213" width="0.4" height="15.0" fill="rgb(0,190,2)" rx="2" ry="2" />
<text  x="16.60" y="223.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (33,634 samples, 0.02%)</title><rect x="11.5" y="197" width="0.2" height="15.0" fill="rgb(0,207,75)" rx="2" ry="2" />
<text  x="14.49" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_write (31,350 samples, 0.02%)</title><rect x="12.4" y="261" width="0.2" height="15.0" fill="rgb(0,202,52)" rx="2" ry="2" />
<text  x="15.42" y="271.5" ></text>
</g>
<g >
<title>[unknown] (48,541 samples, 0.03%)</title><rect x="1096.8" y="53" width="0.3" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.77" y="63.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (20,675 samples, 0.01%)</title><rect x="1189.0" y="245" width="0.1" height="15.0" fill="rgb(0,234,185)" rx="2" ry="2" />
<text  x="1191.96" y="255.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (2,807,407 samples, 1.56%)</title><rect x="962.8" y="181" width="18.4" height="15.0" fill="rgb(0,220,127)" rx="2" ry="2" />
<text  x="965.78" y="191.5" ></text>
</g>
<g >
<title>[unknown] (132,703 samples, 0.07%)</title><rect x="1096.2" y="181" width="0.9" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.22" y="191.5" ></text>
</g>
<g >
<title>[unknown] (17,519 samples, 0.01%)</title><rect x="12.5" y="117" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.51" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (21,188 samples, 0.01%)</title><rect x="1189.2" y="261" width="0.1" height="15.0" fill="rgb(0,202,51)" rx="2" ry="2" />
<text  x="1192.16" y="271.5" ></text>
</g>
<g >
<title>[unknown] (265,274 samples, 0.15%)</title><rect x="1095.3" y="213" width="1.8" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1098.35" y="223.5" ></text>
</g>
<g >
<title>SystemStressTest::updateDisplay (62,137 samples, 0.03%)</title><rect x="13.1" y="213" width="0.4" height="15.0" fill="rgb(0,191,6)" rx="2" ry="2" />
<text  x="16.07" y="223.5" ></text>
</g>
<g >
<title>[unknown] (48,734 samples, 0.03%)</title><rect x="1096.8" y="85" width="0.3" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.77" y="95.5" ></text>
</g>
<g >
<title>[unknown] (53,856 samples, 0.03%)</title><rect x="1096.7" y="101" width="0.4" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.74" y="111.5" ></text>
</g>
<g >
<title>[unknown] (57,144 samples, 0.03%)</title><rect x="1096.7" y="149" width="0.4" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.72" y="159.5" ></text>
</g>
<g >
<title>[unknown] (54,400 samples, 0.03%)</title><rect x="1096.7" y="133" width="0.4" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.73" y="143.5" ></text>
</g>
<g >
<title>[unknown] (329,034 samples, 0.18%)</title><rect x="10.0" y="261" width="2.2" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>__libc_start_call_main (224,847 samples, 0.13%)</title><rect x="12.9" y="261" width="1.5" height="15.0" fill="rgb(0,195,24)" rx="2" ry="2" />
<text  x="15.92" y="271.5" ></text>
</g>
<g >
<title>[unknown] (19,037 samples, 0.01%)</title><rect x="12.5" y="165" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.50" y="175.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (412,840 samples, 0.23%)</title><rect x="1185.9" y="245" width="2.7" height="15.0" fill="rgb(0,235,191)" rx="2" ry="2" />
<text  x="1188.89" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (136,010 samples, 0.08%)</title><rect x="10.3" y="245" width="0.9" height="15.0" fill="rgb(0,200,43)" rx="2" ry="2" />
<text  x="13.28" y="255.5" ></text>
</g>
<g >
<title>_dl_hwcaps_subdirs_active (39,341 samples, 0.02%)</title><rect x="16.8" y="261" width="0.2" height="15.0" fill="rgb(0,233,181)" rx="2" ry="2" />
<text  x="19.76" y="271.5" ></text>
</g>
<g >
<title>clock_gettime@plt (26,057 samples, 0.01%)</title><rect x="1188.6" y="245" width="0.2" height="15.0" fill="rgb(0,214,103)" rx="2" ry="2" />
<text  x="1191.61" y="255.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (191,529 samples, 0.11%)</title><rect x="1078.5" y="229" width="1.3" height="15.0" fill="rgb(0,208,77)" rx="2" ry="2" />
<text  x="1081.50" y="239.5" ></text>
</g>
<g >
<title>[unknown] (163,391 samples, 0.09%)</title><rect x="1096.0" y="197" width="1.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.02" y="207.5" ></text>
</g>
<g >
<title>unsigned long std::uniform_int_distribution&lt;unsigned long&gt;::operator (1,766,310 samples, 0.98%)</title><rect x="699.8" y="197" width="11.6" height="15.0" fill="rgb(0,237,197)" rx="2" ry="2" />
<text  x="702.81" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (118,372 samples, 0.07%)</title><rect x="17.1" y="261" width="0.8" height="15.0" fill="rgb(0,200,43)" rx="2" ry="2" />
<text  x="20.09" y="271.5" ></text>
</g>
<g >
<title>__mempcpy_avx_unaligned_erms (30,547 samples, 0.02%)</title><rect x="14.5" y="261" width="0.2" height="15.0" fill="rgb(0,207,75)" rx="2" ry="2" />
<text  x="17.46" y="271.5" ></text>
</g>
<g >
<title>[unknown] (31,350 samples, 0.02%)</title><rect x="12.4" y="245" width="0.2" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.42" y="255.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (33,123 samples, 0.02%)</title><rect x="1078.3" y="213" width="0.2" height="15.0" fill="rgb(0,208,77)" rx="2" ry="2" />
<text  x="1081.29" y="223.5" ></text>
</g>
<g >
<title>[unknown] (43,424 samples, 0.02%)</title><rect x="1096.8" y="37" width="0.3" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.81" y="47.5" ></text>
</g>
<g >
<title>[unknown] (304,998 samples, 0.17%)</title><rect x="1095.1" y="229" width="2.0" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1098.09" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (19,023 samples, 0.01%)</title><rect x="13.3" y="197" width="0.2" height="15.0" fill="rgb(0,207,72)" rx="2" ry="2" />
<text  x="16.34" y="207.5" ></text>
</g>
<g >
<title>__GI___nptl_deallocate_tsd (18,797 samples, 0.01%)</title><rect x="12.6" y="261" width="0.2" height="15.0" fill="rgb(0,197,32)" rx="2" ry="2" />
<text  x="15.63" y="271.5" ></text>
</g>
<g >
<title>__mpn_extract_double (201,722 samples, 0.11%)</title><rect x="15.2" y="245" width="1.4" height="15.0" fill="rgb(0,224,145)" rx="2" ry="2" />
<text  x="18.24" y="255.5" ></text>
</g>
<g >
<title>[unknown] (54,371 samples, 0.03%)</title><rect x="1096.7" y="117" width="0.4" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.73" y="127.5" ></text>
</g>
<g >
<title>[unknown] (17,825 samples, 0.01%)</title><rect x="12.5" y="149" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.51" y="159.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (23,696 samples, 0.01%)</title><rect x="11.2" y="213" width="0.1" height="15.0" fill="rgb(0,228,160)" rx="2" ry="2" />
<text  x="14.18" y="223.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (171,858 samples, 0.10%)</title><rect x="1187.5" y="229" width="1.1" height="15.0" fill="rgb(0,239,206)" rx="2" ry="2" />
<text  x="1190.48" y="239.5" ></text>
</g>
<g >
<title>[unknown] (27,440 samples, 0.02%)</title><rect x="14.7" y="245" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="17.66" y="255.5" ></text>
</g>
<g >
<title>[unknown] (28,263 samples, 0.02%)</title><rect x="12.4" y="213" width="0.2" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.44" y="223.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.2.5 (27,663 samples, 0.02%)</title><rect x="12.2" y="261" width="0.2" height="15.0" fill="rgb(0,227,156)" rx="2" ry="2" />
<text  x="15.24" y="271.5" ></text>
</g>
<g >
<title>[unknown] (17,519 samples, 0.01%)</title><rect x="12.5" y="133" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.51" y="143.5" ></text>
</g>
<g >
<title>[unknown] (48,615 samples, 0.03%)</title><rect x="1096.8" y="69" width="0.3" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.77" y="79.5" ></text>
</g>
<g >
<title>[unknown] (17,153 samples, 0.01%)</title><rect x="12.5" y="101" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.52" y="111.5" ></text>
</g>
<g >
<title>[unknown] (19,735 samples, 0.01%)</title><rect x="12.5" y="181" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.50" y="191.5" ></text>
</g>
<g >
<title>__munmap (27,440 samples, 0.02%)</title><rect x="14.7" y="261" width="0.1" height="15.0" fill="rgb(0,196,26)" rx="2" ry="2" />
<text  x="17.66" y="271.5" ></text>
</g>
<g >
<title>SystemStressTest::performRandomAccess (156,521,288 samples, 87.24%)</title><rect x="18.0" y="213" width="1029.4" height="15.0" fill="rgb(0,234,188)" rx="2" ry="2" />
<text  x="20.99" y="223.5" >SystemStressTest::performRandomAccess</text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (16,598 samples, 0.01%)</title><rect x="14.2" y="229" width="0.1" height="15.0" fill="rgb(0,234,185)" rx="2" ry="2" />
<text  x="17.22" y="239.5" ></text>
</g>
<g >
<title>[unknown] (29,265 samples, 0.02%)</title><rect x="12.4" y="229" width="0.2" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.44" y="239.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (59,212 samples, 0.03%)</title><rect x="11.8" y="213" width="0.4" height="15.0" fill="rgb(0,196,26)" rx="2" ry="2" />
<text  x="14.77" y="223.5" ></text>
</g>
<g >
<title>[unknown] (20,994 samples, 0.01%)</title><rect x="12.5" y="197" width="0.1" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="15.49" y="207.5" ></text>
</g>
<g >
<title>main (224,847 samples, 0.13%)</title><rect x="12.9" y="245" width="1.5" height="15.0" fill="rgb(0,228,163)" rx="2" ry="2" />
<text  x="15.92" y="255.5" ></text>
</g>
<g >
<title>_int_free_create_chunk (16,950 samples, 0.01%)</title><rect x="10.2" y="245" width="0.1" height="15.0" fill="rgb(0,229,166)" rx="2" ry="2" />
<text  x="13.17" y="255.5" ></text>
</g>
<g >
<title>__GI___pthread_enable_asynccancel (18,502 samples, 0.01%)</title><rect x="12.8" y="261" width="0.1" height="15.0" fill="rgb(0,225,150)" rx="2" ry="2" />
<text  x="15.75" y="271.5" ></text>
</g>
<g >
<title>[unknown] (113,106 samples, 0.06%)</title><rect x="1079.0" y="213" width="0.8" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1082.02" y="223.5" ></text>
</g>
<g >
<title>[unknown] (65,930 samples, 0.04%)</title><rect x="1096.7" y="165" width="0.4" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1099.66" y="175.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (25,605 samples, 0.01%)</title><rect x="1185.2" y="245" width="0.2" height="15.0" fill="rgb(0,216,112)" rx="2" ry="2" />
<text  x="1188.20" y="255.5" ></text>
</g>
<g >
<title>SystemStressTest::performSequentialWrite (2,707,680 samples, 1.51%)</title><rect x="1060.5" y="213" width="17.8" height="15.0" fill="rgb(0,238,203)" rx="2" ry="2" />
<text  x="1063.48" y="223.5" ></text>
</g>
<g >
<title>[unknown] (6,796,581 samples, 3.79%)</title><rect x="1140.5" y="229" width="44.7" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1143.49" y="239.5" >[unk..</text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (24,090 samples, 0.01%)</title><rect x="1188.8" y="245" width="0.1" height="15.0" fill="rgb(0,229,164)" rx="2" ry="2" />
<text  x="1191.78" y="255.5" ></text>
</g>
<g >
<title>__printf_buffer (35,720 samples, 0.02%)</title><rect x="14.9" y="261" width="0.2" height="15.0" fill="rgb(0,204,62)" rx="2" ry="2" />
<text  x="17.89" y="271.5" ></text>
</g>
<g >
<title>[unknown] (100,567 samples, 0.06%)</title><rect x="1184.5" y="197" width="0.7" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1187.53" y="207.5" ></text>
</g>
<g >
<title>virtual thunk to std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ostream (149,586 samples, 0.08%)</title><rect x="11.2" y="245" width="1.0" height="15.0" fill="rgb(0,218,121)" rx="2" ry="2" />
<text  x="14.18" y="255.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (809,284 samples, 0.45%)</title><rect x="1042.1" y="165" width="5.3" height="15.0" fill="rgb(0,220,127)" rx="2" ry="2" />
<text  x="1045.07" y="175.5" ></text>
</g>
<g >
<title>SystemStressTest::measureMemoryBandwidth (161,252,328 samples, 89.87%)</title><rect x="18.0" y="229" width="1060.5" height="15.0" fill="rgb(0,201,48)" rx="2" ry="2" />
<text  x="20.99" y="239.5" >SystemStressTest::measureMemoryBandwidth</text>
</g>
<g >
<title>unsigned long std::uniform_int_distribution&lt;unsigned long&gt;::operator (10,057,720 samples, 5.61%)</title><rect x="981.2" y="181" width="66.2" height="15.0" fill="rgb(0,237,197)" rx="2" ry="2" />
<text  x="984.24" y="191.5" >unsigne..</text>
</g>
<g >
<title>SystemStressTest::cpuHashStressTest (2,634,824 samples, 1.47%)</title><rect x="1079.8" y="245" width="17.3" height="15.0" fill="rgb(0,212,93)" rx="2" ry="2" />
<text  x="1082.76" y="255.5" ></text>
</g>
<g >
<title>SystemStressTest::continuousBandwidthTest (161,450,973 samples, 89.98%)</title><rect x="17.9" y="245" width="1061.9" height="15.0" fill="rgb(0,197,29)" rx="2" ry="2" />
<text  x="20.94" y="255.5" >SystemStressTest::continuousBandwidthTest</text>
</g>
<g >
<title>execute_native_thread_routine (178,075,046 samples, 99.25%)</title><rect x="17.9" y="261" width="1171.2" height="15.0" fill="rgb(0,218,118)" rx="2" ry="2" />
<text  x="20.94" y="271.5" >execute_native_thread_routine</text>
</g>
<g >
<title>[unknown] (206,996 samples, 0.12%)</title><rect x="1183.8" y="213" width="1.4" height="15.0" fill="rgb(0,195,22)" rx="2" ry="2" />
<text  x="1186.83" y="223.5" ></text>
</g>
<g >
<title>SystemStressTest::performSequentialRead (1,990,146 samples, 1.11%)</title><rect x="1047.4" y="213" width="13.1" height="15.0" fill="rgb(0,212,92)" rx="2" ry="2" />
<text  x="1050.39" y="223.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (79,860 samples, 0.04%)</title><rect x="1185.4" y="245" width="0.5" height="15.0" fill="rgb(0,239,206)" rx="2" ry="2" />
<text  x="1188.37" y="255.5" ></text>
</g>
<g >
<title>SystemStressTest::displayTimeProgress (15,923 samples, 0.01%)</title><rect x="13.2" y="197" width="0.1" height="15.0" fill="rgb(0,200,45)" rx="2" ry="2" />
<text  x="16.23" y="207.5" ></text>
</g>
</g>
</svg>
